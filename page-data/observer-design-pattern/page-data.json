{"componentChunkName":"component---src-components-chapter-js","path":"/observer-design-pattern","result":{"data":{"markdownRemark":{"html":"<h1 id=\"o-que-esse-padrão-resolve\" style=\"position:relative;\"><a href=\"#o-que-esse-padr%C3%A3o-resolve\" aria-label=\"o que esse padrão resolve permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>O que esse padrão resolve?</h1>\n<p>Bem, o padrão observer é um design pattern em que um objeto contém uma lista de dependências chamadas observers e as notifica automaticamente assim que qualquer estado muda.</p>\n<p>Esse padrão é implementado amplamente em sistemas de event handling. O padrão observer é o mais utilizado em bibliotecas e sistemas, utilizado quase que em qualquer pedaço de software escrito por pessoas que cuidam do frontend.</p>\n<p>Segue abaixo um exemplo do uso desse padrão no Forms:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Dentro de um componente você encontrará provavelmente uma função que irá escutar(uma função de handler) determinado evento da aplicação como `fieldEdited` como:</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">handleFieldEdited</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>‘data <span class=\"token keyword\">from</span> fieldEdited event<span class=\"token operator\">:</span> ’<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span>‘fieldEdited’<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleFieldEdited</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\">// Assim como em outra parte da aplicação, terá algo emitindo o evento de `fieldEdited` com alguma informação, como:</span>\n\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span>‘fieldEdited’<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n\t\tfield<span class=\"token operator\">:</span> ‘fieldinho_12323132’<span class=\"token punctuation\">,</span>\n\t\tvalue<span class=\"token operator\">:</span> ‘test’<span class=\"token punctuation\">,</span>\n\t\toriginalEvent<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>NativeEvent<span class=\"token operator\">></span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Ao emitir utilizando essa função, todos os componentes que estão escutando o evento de `fieldEdited` irão ser disparados.</span></code></pre></div>\n<p>** Para melhor compreensão, nossos EventEmitters/funções <code class=\"language-text\">emit</code> são nossos Publishers e as nossas funções <code class=\"language-text\">on</code> são nossos Subscribers. **</p>\n<h1 id=\"quais-formas-de-lidar-com-eventos-que-temos-no-forms\" style=\"position:relative;\"><a href=\"#quais-formas-de-lidar-com-eventos-que-temos-no-forms\" aria-label=\"quais formas de lidar com eventos que temos no forms permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Quais formas de lidar com eventos que temos no Forms?</h1>\n<ul>\n<li>Utilizando o <code class=\"language-text\">metal-dom</code>, utilizando <code class=\"language-text\">dom.on</code>, para lidar com eventos da DOM nativos. Por exemplo adicionar determinado evento do browser como ‘scroll’ num componente.</li>\n<li>Utilizando o <code class=\"language-text\">metal-events</code>, nos componentes de Metal.js, essa implementação é sempre é usada e contém vários utilitários para se inscrever e emitir eventos. Um benefício é podemos criar nosso próprio evento, como <code class=\"language-text\">fieldEdited</code>, que não é padrão do browser.\n<a href=\"https://github.com/metal/metal.js/tree/master/packages/metal-events\">metal.js/packages/metal-events at master · metal/metal.js · GitHub</a></li>\n<li>Nas partes que utilizam React, é usada a maneira padrão do React e quando necessário, passado alguma função de metal-events via props ou por Adapter para escutar/emitir eventos.</li>\n</ul>\n<p>O padrão Observer pode causar vários vazamentos de memória, conhecidos como: <a href=\"https://en.wikipedia.org/wiki/Lapsed_listener_problem\">Lapsed listener problem - Wikipedia</a>, em que se não forem removidos todos os listeners ao remover algum componente, podemos deixar vários listeners atachados no browser que não estão sendo mais utilizados e fazer com que o número de funções chamadas quando determinado componente for chamado cresça de forma exponencial.</p>\n<p>Tanto o Metal quanto o React, conseguem remover os event listeners que foram adicionados por eles durante a etapa de destruição do componente. Entretanto, ao utilizar os métodos de lidar com eventos do <code class=\"language-text\">metal-dom</code>, para tratar de eventos na DOM, se faz necessário chamar o método this.${variável<em>do</em>meu<em>event</em>handler}.removeAllListeners() no Lifecycle da etapa de desconstrução do componente(disposed).</p>","frontmatter":{"order":4,"path":"/observer-design-pattern","title":"Padrão de Projeto: Observer"}}},"pageContext":{}}}