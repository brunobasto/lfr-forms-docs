{"componentChunkName":"component---src-components-chapter-js","path":"/boomerang","result":{"data":{"markdownRemark":{"html":"<h2 id=\"what-is-it\" style=\"position:relative;\"><a href=\"#what-is-it\" aria-label=\"what is it permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is it?</h2>\n<p><a href=\"https://github.com/matuzalemsteles/boomerang-effect\">Boomerang effect</a> é um conceito \"arquitetural\" que divide os componentes da aplicação em pequenas partes, cada um com responsabilidades única com a idéia de compartilhar a mesma informação entre pequenas partes da aplicação (não confunda isso com uma store global), a reação do boomerang effect é causado pela composição de componentes consumidores que precisam da mesma informação e o provider que tem a responsabilidade de cuidar da informação e manipular se necessario.</p>\n<p>Segindo a linha de raciocínio <code class=\"language-text\">ComponentRenderer -&gt; Others Components -&gt; Provider</code>, esse comportamento é recomendando que siga se replicando pela estrutura da aplicação quando necessario, isso evita que muitos componentes dependem apenas de um Provider e diminui a responsabilidade dos Providers uma vez que você distribui a responsabilidade. Para se criar um boomerang effect tem algumas regras:</p>\n<ul>\n<li>Apenas crie a estrutura boomerang quando mais de um componente depender da mesma informação;</li>\n<li>O Provedor não renderiza nenhum elemento apenas cuida da informação;</li>\n</ul>\n<h2 id=\"reaction\" style=\"position:relative;\"><a href=\"#reaction\" aria-label=\"reaction permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reaction</h2>\n<p>Para causar um efeito de reação bumerangue é quando o componente consumidor apenas renderiza os dados e quando os dados precisam ser alterados ele causa o efeito de propagação para o Provider e o Provider modifica e desce com as novas informações para os consumidores.</p>\n<h2 id=\"communication\" style=\"position:relative;\"><a href=\"#communication\" aria-label=\"communication permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Communication</h2>\n<p>A comunicação do consumer para o Provider é feita via eventos \"pub/sub\", os consumidores envia eventos para o Provider (isso para evitar renderizações desnecessarias) e o provider pode enviar para todos os consumidores as novas informações, isso pode ser feito via pub para que chegue até os componentes sem causar renderizações a abaixo dos providers.</p>\n<h2 id=\"forms-case\" style=\"position:relative;\"><a href=\"#forms-case\" aria-label=\"forms case permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Forms case</h2>\n<img src=\"/boomerang.png\" />\n<p>O caso do Forms segue apenas com um Provider que é o LayoutProvider, a Sidebar e o Form Builder são os componentes que precisam da mesma informação, por isso temos um Provider que manipula os dados e depois desce com esses novos dados para os dois lados (Sidebar e Form Builder).</p>","frontmatter":{"order":6,"path":"/boomerang","title":"Boomerang effect"}}},"pageContext":{}}}